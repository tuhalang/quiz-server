// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package store

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// QuizGamePrediction is an auto generated low-level Go binding around an user-defined struct.
type QuizGamePrediction struct {
	Id        [32]byte
	Index     *big.Int
	Owner     common.Address
	Answer    [32]byte
	Timestamp *big.Int
	Vote      *big.Int
}

// QuizGameQuiz is an auto generated low-level Go binding around an user-defined struct.
type QuizGameQuiz struct {
	QuizType       *big.Int
	Id             [32]byte
	Owner          common.Address
	Content        [32]byte
	Answer         [32]byte
	Status         bool
	Reward         *big.Int
	Timestamp      *big.Int
	Winner         common.Address
	Duration       *big.Int
	DurationVoting *big.Int
}

// StoreMetaData contains all meta data concerning the Store contract.
var StoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIERC20Metadata\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"CreateQuiz\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Finish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"qid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PredictAnswer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefundsToOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardToWinder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Tax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"qid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"}],\"name\":\"awards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationVoting\",\"type\":\"uint256\"}],\"name\":\"createNewQuizNoAnswer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_answer\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createNewQuizWithAnswer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPrediction\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"structQuizGame.Prediction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"}],\"name\":\"getPredictions\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"internalType\":\"structQuizGame.Prediction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"}],\"name\":\"getQuiz\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"quizType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"content\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationVoting\",\"type\":\"uint256\"}],\"internalType\":\"structQuizGame.Quiz\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_answer\",\"type\":\"string\"}],\"name\":\"predictAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"updateTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_quizId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_predictionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162002f1b38038062002f1b833981810160405281019062000037919062000180565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806002819055505050620001c7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f982620000cc565b9050919050565b60006200010d82620000ec565b9050919050565b6200011f8162000100565b81146200012b57600080fd5b50565b6000815190506200013f8162000114565b92915050565b6000819050919050565b6200015a8162000145565b81146200016657600080fd5b50565b6000815190506200017a816200014f565b92915050565b600080604083850312156200019a5762000199620000c7565b5b6000620001aa858286016200012e565b9250506020620001bd8582860162000169565b9150509250929050565b612d4480620001d76000396000f3fe6080604052600436106100915760003560e01c80638e32d431116100595780638e32d43114610180578063cca0feb6146101bd578063d1a63cd3146101e6578063e76af61d1461020f578063f8bb42601461023857610091565b80631929f8c6146100965780634e76331d146100d357806354362b9e146100fc57806354b762a6146101395780635c4c95cf14610164575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190611ce3565b610254565b6040516100ca9190611dfd565b60405180910390f35b3480156100df57600080fd5b506100fa60048036038101906100f59190611e18565b610387565b005b34801561010857600080fd5b50610123600480360381019061011e9190611e6b565b6107b3565b6040516101309190611f94565b60405180910390f35b34801561014557600080fd5b5061014e610955565b60405161015b9190611fbf565b60405180910390f35b61017e60048036038101906101799190612120565b61095f565b005b34801561018c57600080fd5b506101a760048036038101906101a29190611e6b565b610be5565b6040516101b491906122b9565b60405180910390f35b3480156101c957600080fd5b506101e460048036038101906101df91906122db565b610d3c565b005b3480156101f257600080fd5b5061020d60048036038101906102089190612308565b610d56565b005b34801561021b57600080fd5b5061023660048036038101906102319190611e6b565b6112dc565b005b610252600480360381019061024d9190612364565b6118d1565b005b61025c611b80565b8260006003600083815260200190815260200160002050602060ff16116102b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102af9061244c565b60405180910390fd5b6004600085815260200190815260200160002083815481106102dd576102dc61246c565b5b90600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152505091505092915050565b8260006003600083815260200190815260200160002050602060ff16116103e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103da9061244c565b60405180910390fd5b8160046000868152602001908152602001600020805490501161043b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610432906124e7565b60405180910390fd5b6002600360008681526020019081526020016000206000015414610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90612553565b60405180910390fd5b600115156005600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415610539576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610530906125bf565b60405180910390fd5b600060025411156106655760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518463ffffffff1660e01b81526004016105c5939291906125ee565b6020604051808303816000875af11580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190612651565b61061157600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16847f6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f5116734996002544260405161065c92919061267e565b60405180910390a35b600060046000868152602001908152602001600020838154811061068c5761068b61246c565b5b90600052602060002090600602019050838160000154146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d9906126f3565b60405180910390fd5b60018160050160008282546106f79190612742565b9250508190555060016005600086815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff1685857f3adcc7ed4ad7f15aac0fad8639a7de2a8a492d2d6df1a3c1b21f14f7650387ce60405160405180910390a45050505050565b6107bb611bd2565b8160006003600083815260200190815260200160002050602060ff1611610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080e9061244c565b60405180910390fd5b600360008481526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1615151515815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a82015481525050915050919050565b6000600254905090565b600034116109a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610999906127e4565b60405180910390fd5b60004284848434336040516020016109bf969594939291906128e7565b6040516020818303038152906040528051906020012090506000846040516020016109ea9190612953565b604051602081830303815290604052805190602001209050604051806101600160405280600281526020018381526020013373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200160008019168152602001600115158152602001348152602001428152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481525060036000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a01559050503373ffffffffffffffffffffffffffffffffffffffff16827fcdc5fc690effed916aba3f676d1c948ef9667c23fb10551a9970123cdf857b7c60405160405180910390a35050505050565b60608160006003600083815260200190815260200160002050602060ff1611610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a9061244c565b60405180910390fd5b60046000848152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610d3057838290600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201548152505081526020019060010190610c76565b50505050915050919050565b60006002541015610d4c57600080fd5b8060028190555050565b8160006003600083815260200190815260200160002050602060ff1611610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da99061244c565b60405180910390fd5b6000600360008581526020019081526020016000206040518061016001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1615151515815260200160068201548152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820154815250509050428161012001518260e00151610f029190612742565b11610f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f39906129b6565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff161415610fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fac90612a22565b60405180910390fd5b600060025411156111175760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518463ffffffff1660e01b8152600401611041939291906125ee565b6020604051808303816000875af1158015611060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110849190612651565b6110c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ba90612a8e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16847f6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f5116734996002544260405161110e92919061267e565b60405180910390a35b6000428585336040516020016111309493929190612acf565b604051602081830303815290604052805190602001209050600060046000878152602001908152602001600020805490509050600460008781526020019081526020016000206040518060c001604052808481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff168152602001876040516020016111ba9190612953565b60405160208183030381529060405280519060200120815260200142815260200160008152509080600181540180825580915050600190039060005260206000209060060201600090919091909150600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015550503373ffffffffffffffffffffffffffffffffffffffff1686837f112a9c593516ea70cc1682324b836f733334b4044cbdd2f30a92e8458353e3e9846040516112cc9190611fbf565b60405180910390a4505050505050565b8060006003600083815260200190815260200160002050602060ff1611611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132f9061244c565b60405180910390fd5b600060036000848152602001908152602001600020905042816009015482600701546113649190612742565b11156113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90612b65565b60405180910390fd5b600060025411156114d15760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002546040518463ffffffff1660e01b8152600401611431939291906125ee565b6020604051808303816000875af1158015611450573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114749190612651565b61147d57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16837f6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f511673499600254426040516114c892919061267e565b60405180910390a35b60008160050160006101000a81548160ff02191690831515021790555060008060005b600460008781526020019081526020016000208054905081101561163b5760006004600088815260200190815260200160002082815481106115395761153861246c565b5b90600052602060002090600602016040518060c001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481525050905060018560000154141561160b5784600401548160600151141561160657806040015193505061163b565b611627565b828160a001511115611626578060a001519250806040015193505b5b50808061163390612b85565b9150506114f4565b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461177b5760008273ffffffffffffffffffffffffffffffffffffffff16846006015460405161169a90612bff565b60006040518083038185875af1925050503d80600081146116d7576040519150601f19603f3d011682016040523d82523d6000602084013e6116dc565b606091505b5050905080611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790612c60565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16867f45ec5e670f1d367b5dc6f15b95818ac76831881de8f4db9df3d397a7ce8b933186600601544260405161176d92919061267e565b60405180910390a3506118ca565b60008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1684600601546040516117c990612bff565b60006040518083038185875af1925050503d8060008114611806576040519150601f19603f3d011682016040523d82523d6000602084013e61180b565b606091505b505090508061184f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184690612c60565b60405180910390fd5b8360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16867f032504bbe20385c25d25024c9c02526fe3e18bcfb8fee29ceaa1b5026f872dc08660060154426040516118c092919061267e565b60405180910390a3505b5050505050565b60003411611914576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190b906127e4565b60405180910390fd5b600042848484343360405160200161193196959493929190612c80565b60405160208183030381529060405280519060200120905060008460405160200161195c9190612953565b6040516020818303038152906040528051906020012090506000846040516020016119879190612953565b604051602081830303815290604052805190602001209050604051806101600160405280600181526020018481526020013373ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001600115158152602001348152602001428152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600081525060036000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c0820151816006015560e082015181600701556101008201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610120820151816009015561014082015181600a01559050503373ffffffffffffffffffffffffffffffffffffffff16837fcdc5fc690effed916aba3f676d1c948ef9667c23fb10551a9970123cdf857b7c60405160405180910390a3505050505050565b6040518060c001604052806000801916815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160008152602001600081525090565b6040518061016001604052806000815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008019168152602001600080191681526020016000151581526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611c8a81611c77565b8114611c9557600080fd5b50565b600081359050611ca781611c81565b92915050565b6000819050919050565b611cc081611cad565b8114611ccb57600080fd5b50565b600081359050611cdd81611cb7565b92915050565b60008060408385031215611cfa57611cf9611c6d565b5b6000611d0885828601611c98565b9250506020611d1985828601611cce565b9150509250929050565b611d2c81611c77565b82525050565b611d3b81611cad565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d6c82611d41565b9050919050565b611d7c81611d61565b82525050565b60c082016000820151611d986000850182611d23565b506020820151611dab6020850182611d32565b506040820151611dbe6040850182611d73565b506060820151611dd16060850182611d23565b506080820151611de46080850182611d32565b5060a0820151611df760a0850182611d32565b50505050565b600060c082019050611e126000830184611d82565b92915050565b600080600060608486031215611e3157611e30611c6d565b5b6000611e3f86828701611c98565b9350506020611e5086828701611c98565b9250506040611e6186828701611cce565b9150509250925092565b600060208284031215611e8157611e80611c6d565b5b6000611e8f84828501611c98565b91505092915050565b60008115159050919050565b611ead81611e98565b82525050565b61016082016000820151611eca6000850182611d32565b506020820151611edd6020850182611d23565b506040820151611ef06040850182611d73565b506060820151611f036060850182611d23565b506080820151611f166080850182611d23565b5060a0820151611f2960a0850182611ea4565b5060c0820151611f3c60c0850182611d32565b5060e0820151611f4f60e0850182611d32565b50610100820151611f64610100850182611d73565b50610120820151611f79610120850182611d32565b50610140820151611f8e610140850182611d32565b50505050565b600061016082019050611faa6000830184611eb3565b92915050565b611fb981611cad565b82525050565b6000602082019050611fd46000830184611fb0565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61202d82611fe4565b810181811067ffffffffffffffff8211171561204c5761204b611ff5565b5b80604052505050565b600061205f611c63565b905061206b8282612024565b919050565b600067ffffffffffffffff82111561208b5761208a611ff5565b5b61209482611fe4565b9050602081019050919050565b82818337600083830152505050565b60006120c36120be84612070565b612055565b9050828152602081018484840111156120df576120de611fdf565b5b6120ea8482856120a1565b509392505050565b600082601f83011261210757612106611fda565b5b81356121178482602086016120b0565b91505092915050565b60008060006060848603121561213957612138611c6d565b5b600084013567ffffffffffffffff81111561215757612156611c72565b5b612163868287016120f2565b935050602061217486828701611cce565b925050604061218586828701611cce565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516121d16000850182611d23565b5060208201516121e46020850182611d32565b5060408201516121f76040850182611d73565b50606082015161220a6060850182611d23565b50608082015161221d6080850182611d32565b5060a082015161223060a0850182611d32565b50505050565b600061224283836121bb565b60c08301905092915050565b6000602082019050919050565b60006122668261218f565b612270818561219a565b935061227b836121ab565b8060005b838110156122ac5781516122938882612236565b975061229e8361224e565b92505060018101905061227f565b5085935050505092915050565b600060208201905081810360008301526122d3818461225b565b905092915050565b6000602082840312156122f1576122f0611c6d565b5b60006122ff84828501611cce565b91505092915050565b6000806040838503121561231f5761231e611c6d565b5b600061232d85828601611c98565b925050602083013567ffffffffffffffff81111561234e5761234d611c72565b5b61235a858286016120f2565b9150509250929050565b60008060006060848603121561237d5761237c611c6d565b5b600084013567ffffffffffffffff81111561239b5761239a611c72565b5b6123a7868287016120f2565b935050602084013567ffffffffffffffff8111156123c8576123c7611c72565b5b6123d4868287016120f2565b92505060406123e586828701611cce565b9150509250925092565b600082825260208201905092915050565b7f4e6f742065786973747300000000000000000000000000000000000000000000600082015250565b6000612436600a836123ef565b915061244182612400565b602082019050919050565b6000602082019050818103600083015261246581612429565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e64657820696e76616c696400000000000000000000000000000000000000600082015250565b60006124d1600d836123ef565b91506124dc8261249b565b602082019050919050565b60006020820190508181036000830152612500816124c4565b9050919050565b7f4e6f7420616c6c6f7720766f7465000000000000000000000000000000000000600082015250565b600061253d600e836123ef565b915061254882612507565b602082019050919050565b6000602082019050818103600083015261256c81612530565b9050919050565b7f4f6e6c7920766f7465206f6e652074696d657300000000000000000000000000600082015250565b60006125a96013836123ef565b91506125b482612573565b602082019050919050565b600060208201905081810360008301526125d88161259c565b9050919050565b6125e881611d61565b82525050565b600060608201905061260360008301866125df565b61261060208301856125df565b61261d6040830184611fb0565b949350505050565b61262e81611e98565b811461263957600080fd5b50565b60008151905061264b81612625565b92915050565b60006020828403121561266757612666611c6d565b5b60006126758482850161263c565b91505092915050565b60006040820190506126936000830185611fb0565b6126a06020830184611fb0565b9392505050565b7f70726564696374696f6e206e6f7420666f756e64000000000000000000000000600082015250565b60006126dd6014836123ef565b91506126e8826126a7565b602082019050919050565b6000602082019050818103600083015261270c816126d0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061274d82611cad565b915061275883611cad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561278d5761278c612713565b5b828201905092915050565b7f726577617264206d7573742067726561746572207468616e2030000000000000600082015250565b60006127ce601a836123ef565b91506127d982612798565b602082019050919050565b600060208201905081810360008301526127fd816127c1565b9050919050565b6000819050919050565b61281f61281a82611cad565b612804565b82525050565b600081519050919050565b600081905092915050565b60005b8381101561285957808201518184015260208101905061283e565b83811115612868576000848401525b50505050565b600061287982612825565b6128838185612830565b935061289381856020860161283b565b80840191505092915050565b60008160601b9050919050565b60006128b78261289f565b9050919050565b60006128c9826128ac565b9050919050565b6128e16128dc82611d61565b6128be565b82525050565b60006128f3828961280e565b602082019150612903828861286e565b915061290f828761280e565b60208201915061291f828661280e565b60208201915061292f828561280e565b60208201915061293f82846128d0565b601482019150819050979650505050505050565b600061295f828461286e565b915081905092915050565b7f486176652066696e697368656400000000000000000000000000000000000000600082015250565b60006129a0600d836123ef565b91506129ab8261296a565b602082019050919050565b600060208201905081810360008301526129cf81612993565b9050919050565b7f4e6f7420616c6c6f77206f776e65722070726564696374000000000000000000600082015250565b6000612a0c6017836123ef565b9150612a17826129d6565b602082019050919050565b60006020820190508181036000830152612a3b816129ff565b9050919050565b7f6e6f7420656e6f75676820746f6b656e00000000000000000000000000000000600082015250565b6000612a786010836123ef565b9150612a8382612a42565b602082019050919050565b60006020820190508181036000830152612aa781612a6b565b9050919050565b6000819050919050565b612ac9612ac482611c77565b612aae565b82525050565b6000612adb828761280e565b602082019150612aeb8286612ab8565b602082019150612afb828561286e565b9150612b0782846128d0565b60148201915081905095945050505050565b7f486176656e27742066696e697368656400000000000000000000000000000000600082015250565b6000612b4f6010836123ef565b9150612b5a82612b19565b602082019050919050565b60006020820190508181036000830152612b7e81612b42565b9050919050565b6000612b9082611cad565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612bc357612bc2612713565b5b600182019050919050565b600081905092915050565b50565b6000612be9600083612bce565b9150612bf482612bd9565b600082019050919050565b6000612c0a82612bdc565b9150819050919050565b7f4661696c656420746f2073656e6420546f6d6f00000000000000000000000000600082015250565b6000612c4a6013836123ef565b9150612c5582612c14565b602082019050919050565b60006020820190508181036000830152612c7981612c3d565b9050919050565b6000612c8c828961280e565b602082019150612c9c828861286e565b9150612ca8828761286e565b9150612cb4828661280e565b602082019150612cc4828561280e565b602082019150612cd482846128d0565b60148201915081905097965050505050505056fea264697066735822122063b0b9e42defebcff114e471228b93975f815870eb65823421ba474ace35f37664736f6c637828302e382e31312d646576656c6f702e323032312e31322e342b636f6d6d69742e31363032643163350059",
}

// StoreABI is the input ABI used to generate the binding from.
// Deprecated: Use StoreMetaData.ABI instead.
var StoreABI = StoreMetaData.ABI

// StoreBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StoreMetaData.Bin instead.
var StoreBin = StoreMetaData.Bin

// DeployStore deploys a new Ethereum contract, binding an instance of Store to it.
func DeployStore(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address, _tax *big.Int) (common.Address, *types.Transaction, *Store, error) {
	parsed, err := StoreMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StoreBin), backend, _token, _tax)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// Store is an auto generated Go binding around an Ethereum contract.
type Store struct {
	StoreCaller     // Read-only binding to the contract
	StoreTransactor // Write-only binding to the contract
	StoreFilterer   // Log filterer for contract events
}

// StoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type StoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StoreSession struct {
	Contract     *Store            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StoreCallerSession struct {
	Contract *StoreCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// StoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StoreTransactorSession struct {
	Contract     *StoreTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type StoreRaw struct {
	Contract *Store // Generic contract binding to access the raw methods on
}

// StoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StoreCallerRaw struct {
	Contract *StoreCaller // Generic read-only contract binding to access the raw methods on
}

// StoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StoreTransactorRaw struct {
	Contract *StoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStore creates a new instance of Store, bound to a specific deployed contract.
func NewStore(address common.Address, backend bind.ContractBackend) (*Store, error) {
	contract, err := bindStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Store{StoreCaller: StoreCaller{contract: contract}, StoreTransactor: StoreTransactor{contract: contract}, StoreFilterer: StoreFilterer{contract: contract}}, nil
}

// NewStoreCaller creates a new read-only instance of Store, bound to a specific deployed contract.
func NewStoreCaller(address common.Address, caller bind.ContractCaller) (*StoreCaller, error) {
	contract, err := bindStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StoreCaller{contract: contract}, nil
}

// NewStoreTransactor creates a new write-only instance of Store, bound to a specific deployed contract.
func NewStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*StoreTransactor, error) {
	contract, err := bindStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StoreTransactor{contract: contract}, nil
}

// NewStoreFilterer creates a new log filterer instance of Store, bound to a specific deployed contract.
func NewStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*StoreFilterer, error) {
	contract, err := bindStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StoreFilterer{contract: contract}, nil
}

// bindStore binds a generic wrapper to an already deployed contract.
func bindStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StoreABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.StoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.StoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Store *StoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Store.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Store *StoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Store.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Store *StoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Store.Contract.contract.Transact(opts, method, params...)
}

// GetPrediction is a free data retrieval call binding the contract method 0x1929f8c6.
//
// Solidity: function getPrediction(bytes32 _quizId, uint256 _index) view returns((bytes32,uint256,address,bytes32,uint256,uint256))
func (_Store *StoreCaller) GetPrediction(opts *bind.CallOpts, _quizId [32]byte, _index *big.Int) (QuizGamePrediction, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getPrediction", _quizId, _index)

	if err != nil {
		return *new(QuizGamePrediction), err
	}

	out0 := *abi.ConvertType(out[0], new(QuizGamePrediction)).(*QuizGamePrediction)

	return out0, err

}

// GetPrediction is a free data retrieval call binding the contract method 0x1929f8c6.
//
// Solidity: function getPrediction(bytes32 _quizId, uint256 _index) view returns((bytes32,uint256,address,bytes32,uint256,uint256))
func (_Store *StoreSession) GetPrediction(_quizId [32]byte, _index *big.Int) (QuizGamePrediction, error) {
	return _Store.Contract.GetPrediction(&_Store.CallOpts, _quizId, _index)
}

// GetPrediction is a free data retrieval call binding the contract method 0x1929f8c6.
//
// Solidity: function getPrediction(bytes32 _quizId, uint256 _index) view returns((bytes32,uint256,address,bytes32,uint256,uint256))
func (_Store *StoreCallerSession) GetPrediction(_quizId [32]byte, _index *big.Int) (QuizGamePrediction, error) {
	return _Store.Contract.GetPrediction(&_Store.CallOpts, _quizId, _index)
}

// GetPredictions is a free data retrieval call binding the contract method 0x8e32d431.
//
// Solidity: function getPredictions(bytes32 _quizId) view returns((bytes32,uint256,address,bytes32,uint256,uint256)[])
func (_Store *StoreCaller) GetPredictions(opts *bind.CallOpts, _quizId [32]byte) ([]QuizGamePrediction, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getPredictions", _quizId)

	if err != nil {
		return *new([]QuizGamePrediction), err
	}

	out0 := *abi.ConvertType(out[0], new([]QuizGamePrediction)).(*[]QuizGamePrediction)

	return out0, err

}

// GetPredictions is a free data retrieval call binding the contract method 0x8e32d431.
//
// Solidity: function getPredictions(bytes32 _quizId) view returns((bytes32,uint256,address,bytes32,uint256,uint256)[])
func (_Store *StoreSession) GetPredictions(_quizId [32]byte) ([]QuizGamePrediction, error) {
	return _Store.Contract.GetPredictions(&_Store.CallOpts, _quizId)
}

// GetPredictions is a free data retrieval call binding the contract method 0x8e32d431.
//
// Solidity: function getPredictions(bytes32 _quizId) view returns((bytes32,uint256,address,bytes32,uint256,uint256)[])
func (_Store *StoreCallerSession) GetPredictions(_quizId [32]byte) ([]QuizGamePrediction, error) {
	return _Store.Contract.GetPredictions(&_Store.CallOpts, _quizId)
}

// GetQuiz is a free data retrieval call binding the contract method 0x54362b9e.
//
// Solidity: function getQuiz(bytes32 _quizId) view returns((uint256,bytes32,address,bytes32,bytes32,bool,uint256,uint256,address,uint256,uint256))
func (_Store *StoreCaller) GetQuiz(opts *bind.CallOpts, _quizId [32]byte) (QuizGameQuiz, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getQuiz", _quizId)

	if err != nil {
		return *new(QuizGameQuiz), err
	}

	out0 := *abi.ConvertType(out[0], new(QuizGameQuiz)).(*QuizGameQuiz)

	return out0, err

}

// GetQuiz is a free data retrieval call binding the contract method 0x54362b9e.
//
// Solidity: function getQuiz(bytes32 _quizId) view returns((uint256,bytes32,address,bytes32,bytes32,bool,uint256,uint256,address,uint256,uint256))
func (_Store *StoreSession) GetQuiz(_quizId [32]byte) (QuizGameQuiz, error) {
	return _Store.Contract.GetQuiz(&_Store.CallOpts, _quizId)
}

// GetQuiz is a free data retrieval call binding the contract method 0x54362b9e.
//
// Solidity: function getQuiz(bytes32 _quizId) view returns((uint256,bytes32,address,bytes32,bytes32,bool,uint256,uint256,address,uint256,uint256))
func (_Store *StoreCallerSession) GetQuiz(_quizId [32]byte) (QuizGameQuiz, error) {
	return _Store.Contract.GetQuiz(&_Store.CallOpts, _quizId)
}

// GetTax is a free data retrieval call binding the contract method 0x54b762a6.
//
// Solidity: function getTax() view returns(uint256)
func (_Store *StoreCaller) GetTax(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Store.contract.Call(opts, &out, "getTax")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTax is a free data retrieval call binding the contract method 0x54b762a6.
//
// Solidity: function getTax() view returns(uint256)
func (_Store *StoreSession) GetTax() (*big.Int, error) {
	return _Store.Contract.GetTax(&_Store.CallOpts)
}

// GetTax is a free data retrieval call binding the contract method 0x54b762a6.
//
// Solidity: function getTax() view returns(uint256)
func (_Store *StoreCallerSession) GetTax() (*big.Int, error) {
	return _Store.Contract.GetTax(&_Store.CallOpts)
}

// Awards is a paid mutator transaction binding the contract method 0xe76af61d.
//
// Solidity: function awards(bytes32 _quizId) returns()
func (_Store *StoreTransactor) Awards(opts *bind.TransactOpts, _quizId [32]byte) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "awards", _quizId)
}

// Awards is a paid mutator transaction binding the contract method 0xe76af61d.
//
// Solidity: function awards(bytes32 _quizId) returns()
func (_Store *StoreSession) Awards(_quizId [32]byte) (*types.Transaction, error) {
	return _Store.Contract.Awards(&_Store.TransactOpts, _quizId)
}

// Awards is a paid mutator transaction binding the contract method 0xe76af61d.
//
// Solidity: function awards(bytes32 _quizId) returns()
func (_Store *StoreTransactorSession) Awards(_quizId [32]byte) (*types.Transaction, error) {
	return _Store.Contract.Awards(&_Store.TransactOpts, _quizId)
}

// CreateNewQuizNoAnswer is a paid mutator transaction binding the contract method 0x5c4c95cf.
//
// Solidity: function createNewQuizNoAnswer(string _content, uint256 _duration, uint256 _durationVoting) payable returns()
func (_Store *StoreTransactor) CreateNewQuizNoAnswer(opts *bind.TransactOpts, _content string, _duration *big.Int, _durationVoting *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "createNewQuizNoAnswer", _content, _duration, _durationVoting)
}

// CreateNewQuizNoAnswer is a paid mutator transaction binding the contract method 0x5c4c95cf.
//
// Solidity: function createNewQuizNoAnswer(string _content, uint256 _duration, uint256 _durationVoting) payable returns()
func (_Store *StoreSession) CreateNewQuizNoAnswer(_content string, _duration *big.Int, _durationVoting *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CreateNewQuizNoAnswer(&_Store.TransactOpts, _content, _duration, _durationVoting)
}

// CreateNewQuizNoAnswer is a paid mutator transaction binding the contract method 0x5c4c95cf.
//
// Solidity: function createNewQuizNoAnswer(string _content, uint256 _duration, uint256 _durationVoting) payable returns()
func (_Store *StoreTransactorSession) CreateNewQuizNoAnswer(_content string, _duration *big.Int, _durationVoting *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CreateNewQuizNoAnswer(&_Store.TransactOpts, _content, _duration, _durationVoting)
}

// CreateNewQuizWithAnswer is a paid mutator transaction binding the contract method 0xf8bb4260.
//
// Solidity: function createNewQuizWithAnswer(string _content, string _answer, uint256 _duration) payable returns()
func (_Store *StoreTransactor) CreateNewQuizWithAnswer(opts *bind.TransactOpts, _content string, _answer string, _duration *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "createNewQuizWithAnswer", _content, _answer, _duration)
}

// CreateNewQuizWithAnswer is a paid mutator transaction binding the contract method 0xf8bb4260.
//
// Solidity: function createNewQuizWithAnswer(string _content, string _answer, uint256 _duration) payable returns()
func (_Store *StoreSession) CreateNewQuizWithAnswer(_content string, _answer string, _duration *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CreateNewQuizWithAnswer(&_Store.TransactOpts, _content, _answer, _duration)
}

// CreateNewQuizWithAnswer is a paid mutator transaction binding the contract method 0xf8bb4260.
//
// Solidity: function createNewQuizWithAnswer(string _content, string _answer, uint256 _duration) payable returns()
func (_Store *StoreTransactorSession) CreateNewQuizWithAnswer(_content string, _answer string, _duration *big.Int) (*types.Transaction, error) {
	return _Store.Contract.CreateNewQuizWithAnswer(&_Store.TransactOpts, _content, _answer, _duration)
}

// PredictAnswer is a paid mutator transaction binding the contract method 0xd1a63cd3.
//
// Solidity: function predictAnswer(bytes32 _quizId, string _answer) returns()
func (_Store *StoreTransactor) PredictAnswer(opts *bind.TransactOpts, _quizId [32]byte, _answer string) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "predictAnswer", _quizId, _answer)
}

// PredictAnswer is a paid mutator transaction binding the contract method 0xd1a63cd3.
//
// Solidity: function predictAnswer(bytes32 _quizId, string _answer) returns()
func (_Store *StoreSession) PredictAnswer(_quizId [32]byte, _answer string) (*types.Transaction, error) {
	return _Store.Contract.PredictAnswer(&_Store.TransactOpts, _quizId, _answer)
}

// PredictAnswer is a paid mutator transaction binding the contract method 0xd1a63cd3.
//
// Solidity: function predictAnswer(bytes32 _quizId, string _answer) returns()
func (_Store *StoreTransactorSession) PredictAnswer(_quizId [32]byte, _answer string) (*types.Transaction, error) {
	return _Store.Contract.PredictAnswer(&_Store.TransactOpts, _quizId, _answer)
}

// UpdateTax is a paid mutator transaction binding the contract method 0xcca0feb6.
//
// Solidity: function updateTax(uint256 _tax) returns()
func (_Store *StoreTransactor) UpdateTax(opts *bind.TransactOpts, _tax *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "updateTax", _tax)
}

// UpdateTax is a paid mutator transaction binding the contract method 0xcca0feb6.
//
// Solidity: function updateTax(uint256 _tax) returns()
func (_Store *StoreSession) UpdateTax(_tax *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateTax(&_Store.TransactOpts, _tax)
}

// UpdateTax is a paid mutator transaction binding the contract method 0xcca0feb6.
//
// Solidity: function updateTax(uint256 _tax) returns()
func (_Store *StoreTransactorSession) UpdateTax(_tax *big.Int) (*types.Transaction, error) {
	return _Store.Contract.UpdateTax(&_Store.TransactOpts, _tax)
}

// Voting is a paid mutator transaction binding the contract method 0x4e76331d.
//
// Solidity: function voting(bytes32 _quizId, bytes32 _predictionId, uint256 _index) returns()
func (_Store *StoreTransactor) Voting(opts *bind.TransactOpts, _quizId [32]byte, _predictionId [32]byte, _index *big.Int) (*types.Transaction, error) {
	return _Store.contract.Transact(opts, "voting", _quizId, _predictionId, _index)
}

// Voting is a paid mutator transaction binding the contract method 0x4e76331d.
//
// Solidity: function voting(bytes32 _quizId, bytes32 _predictionId, uint256 _index) returns()
func (_Store *StoreSession) Voting(_quizId [32]byte, _predictionId [32]byte, _index *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Voting(&_Store.TransactOpts, _quizId, _predictionId, _index)
}

// Voting is a paid mutator transaction binding the contract method 0x4e76331d.
//
// Solidity: function voting(bytes32 _quizId, bytes32 _predictionId, uint256 _index) returns()
func (_Store *StoreTransactorSession) Voting(_quizId [32]byte, _predictionId [32]byte, _index *big.Int) (*types.Transaction, error) {
	return _Store.Contract.Voting(&_Store.TransactOpts, _quizId, _predictionId, _index)
}

// StoreCreateQuizIterator is returned from FilterCreateQuiz and is used to iterate over the raw logs and unpacked data for CreateQuiz events raised by the Store contract.
type StoreCreateQuizIterator struct {
	Event *StoreCreateQuiz // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreCreateQuizIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreCreateQuiz)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreCreateQuiz)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreCreateQuizIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreCreateQuizIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreCreateQuiz represents a CreateQuiz event raised by the Store contract.
type StoreCreateQuiz struct {
	Id    [32]byte
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCreateQuiz is a free log retrieval operation binding the contract event 0xcdc5fc690effed916aba3f676d1c948ef9667c23fb10551a9970123cdf857b7c.
//
// Solidity: event CreateQuiz(bytes32 indexed id, address indexed owner)
func (_Store *StoreFilterer) FilterCreateQuiz(opts *bind.FilterOpts, id [][32]byte, owner []common.Address) (*StoreCreateQuizIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "CreateQuiz", idRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &StoreCreateQuizIterator{contract: _Store.contract, event: "CreateQuiz", logs: logs, sub: sub}, nil
}

// WatchCreateQuiz is a free log subscription operation binding the contract event 0xcdc5fc690effed916aba3f676d1c948ef9667c23fb10551a9970123cdf857b7c.
//
// Solidity: event CreateQuiz(bytes32 indexed id, address indexed owner)
func (_Store *StoreFilterer) WatchCreateQuiz(opts *bind.WatchOpts, sink chan<- *StoreCreateQuiz, id [][32]byte, owner []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "CreateQuiz", idRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreCreateQuiz)
				if err := _Store.contract.UnpackLog(event, "CreateQuiz", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateQuiz is a log parse operation binding the contract event 0xcdc5fc690effed916aba3f676d1c948ef9667c23fb10551a9970123cdf857b7c.
//
// Solidity: event CreateQuiz(bytes32 indexed id, address indexed owner)
func (_Store *StoreFilterer) ParseCreateQuiz(log types.Log) (*StoreCreateQuiz, error) {
	event := new(StoreCreateQuiz)
	if err := _Store.contract.UnpackLog(event, "CreateQuiz", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreFinishIterator is returned from FilterFinish and is used to iterate over the raw logs and unpacked data for Finish events raised by the Store contract.
type StoreFinishIterator struct {
	Event *StoreFinish // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreFinishIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreFinish)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreFinish)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreFinishIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreFinishIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreFinish represents a Finish event raised by the Store contract.
type StoreFinish struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterFinish is a free log retrieval operation binding the contract event 0xc87ac21401562c1630718f474ffaad53c22b017ead9311dad0a296ef6149c82e.
//
// Solidity: event Finish(bytes32 indexed id)
func (_Store *StoreFilterer) FilterFinish(opts *bind.FilterOpts, id [][32]byte) (*StoreFinishIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "Finish", idRule)
	if err != nil {
		return nil, err
	}
	return &StoreFinishIterator{contract: _Store.contract, event: "Finish", logs: logs, sub: sub}, nil
}

// WatchFinish is a free log subscription operation binding the contract event 0xc87ac21401562c1630718f474ffaad53c22b017ead9311dad0a296ef6149c82e.
//
// Solidity: event Finish(bytes32 indexed id)
func (_Store *StoreFilterer) WatchFinish(opts *bind.WatchOpts, sink chan<- *StoreFinish, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "Finish", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreFinish)
				if err := _Store.contract.UnpackLog(event, "Finish", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinish is a log parse operation binding the contract event 0xc87ac21401562c1630718f474ffaad53c22b017ead9311dad0a296ef6149c82e.
//
// Solidity: event Finish(bytes32 indexed id)
func (_Store *StoreFilterer) ParseFinish(log types.Log) (*StoreFinish, error) {
	event := new(StoreFinish)
	if err := _Store.contract.UnpackLog(event, "Finish", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StorePredictAnswerIterator is returned from FilterPredictAnswer and is used to iterate over the raw logs and unpacked data for PredictAnswer events raised by the Store contract.
type StorePredictAnswerIterator struct {
	Event *StorePredictAnswer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StorePredictAnswerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StorePredictAnswer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StorePredictAnswer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StorePredictAnswerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StorePredictAnswerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StorePredictAnswer represents a PredictAnswer event raised by the Store contract.
type StorePredictAnswer struct {
	Id    [32]byte
	Qid   [32]byte
	Owner common.Address
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPredictAnswer is a free log retrieval operation binding the contract event 0x112a9c593516ea70cc1682324b836f733334b4044cbdd2f30a92e8458353e3e9.
//
// Solidity: event PredictAnswer(bytes32 indexed id, bytes32 indexed qid, address indexed owner, uint256 index)
func (_Store *StoreFilterer) FilterPredictAnswer(opts *bind.FilterOpts, id [][32]byte, qid [][32]byte, owner []common.Address) (*StorePredictAnswerIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var qidRule []interface{}
	for _, qidItem := range qid {
		qidRule = append(qidRule, qidItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "PredictAnswer", idRule, qidRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &StorePredictAnswerIterator{contract: _Store.contract, event: "PredictAnswer", logs: logs, sub: sub}, nil
}

// WatchPredictAnswer is a free log subscription operation binding the contract event 0x112a9c593516ea70cc1682324b836f733334b4044cbdd2f30a92e8458353e3e9.
//
// Solidity: event PredictAnswer(bytes32 indexed id, bytes32 indexed qid, address indexed owner, uint256 index)
func (_Store *StoreFilterer) WatchPredictAnswer(opts *bind.WatchOpts, sink chan<- *StorePredictAnswer, id [][32]byte, qid [][32]byte, owner []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var qidRule []interface{}
	for _, qidItem := range qid {
		qidRule = append(qidRule, qidItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "PredictAnswer", idRule, qidRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StorePredictAnswer)
				if err := _Store.contract.UnpackLog(event, "PredictAnswer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePredictAnswer is a log parse operation binding the contract event 0x112a9c593516ea70cc1682324b836f733334b4044cbdd2f30a92e8458353e3e9.
//
// Solidity: event PredictAnswer(bytes32 indexed id, bytes32 indexed qid, address indexed owner, uint256 index)
func (_Store *StoreFilterer) ParsePredictAnswer(log types.Log) (*StorePredictAnswer, error) {
	event := new(StorePredictAnswer)
	if err := _Store.contract.UnpackLog(event, "PredictAnswer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreRefundsToOwnerIterator is returned from FilterRefundsToOwner and is used to iterate over the raw logs and unpacked data for RefundsToOwner events raised by the Store contract.
type StoreRefundsToOwnerIterator struct {
	Event *StoreRefundsToOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRefundsToOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRefundsToOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRefundsToOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRefundsToOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRefundsToOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRefundsToOwner represents a RefundsToOwner event raised by the Store contract.
type StoreRefundsToOwner struct {
	Id        [32]byte
	Owner     common.Address
	Amount    *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRefundsToOwner is a free log retrieval operation binding the contract event 0x032504bbe20385c25d25024c9c02526fe3e18bcfb8fee29ceaa1b5026f872dc0.
//
// Solidity: event RefundsToOwner(bytes32 indexed id, address indexed owner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) FilterRefundsToOwner(opts *bind.FilterOpts, id [][32]byte, owner []common.Address) (*StoreRefundsToOwnerIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "RefundsToOwner", idRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &StoreRefundsToOwnerIterator{contract: _Store.contract, event: "RefundsToOwner", logs: logs, sub: sub}, nil
}

// WatchRefundsToOwner is a free log subscription operation binding the contract event 0x032504bbe20385c25d25024c9c02526fe3e18bcfb8fee29ceaa1b5026f872dc0.
//
// Solidity: event RefundsToOwner(bytes32 indexed id, address indexed owner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) WatchRefundsToOwner(opts *bind.WatchOpts, sink chan<- *StoreRefundsToOwner, id [][32]byte, owner []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "RefundsToOwner", idRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRefundsToOwner)
				if err := _Store.contract.UnpackLog(event, "RefundsToOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundsToOwner is a log parse operation binding the contract event 0x032504bbe20385c25d25024c9c02526fe3e18bcfb8fee29ceaa1b5026f872dc0.
//
// Solidity: event RefundsToOwner(bytes32 indexed id, address indexed owner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) ParseRefundsToOwner(log types.Log) (*StoreRefundsToOwner, error) {
	event := new(StoreRefundsToOwner)
	if err := _Store.contract.UnpackLog(event, "RefundsToOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreRewardToWinderIterator is returned from FilterRewardToWinder and is used to iterate over the raw logs and unpacked data for RewardToWinder events raised by the Store contract.
type StoreRewardToWinderIterator struct {
	Event *StoreRewardToWinder // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreRewardToWinderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreRewardToWinder)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreRewardToWinder)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreRewardToWinderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreRewardToWinderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreRewardToWinder represents a RewardToWinder event raised by the Store contract.
type StoreRewardToWinder struct {
	Id        [32]byte
	Winner    common.Address
	Amount    *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewardToWinder is a free log retrieval operation binding the contract event 0x45ec5e670f1d367b5dc6f15b95818ac76831881de8f4db9df3d397a7ce8b9331.
//
// Solidity: event RewardToWinder(bytes32 indexed id, address indexed winner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) FilterRewardToWinder(opts *bind.FilterOpts, id [][32]byte, winner []common.Address) (*StoreRewardToWinderIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "RewardToWinder", idRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return &StoreRewardToWinderIterator{contract: _Store.contract, event: "RewardToWinder", logs: logs, sub: sub}, nil
}

// WatchRewardToWinder is a free log subscription operation binding the contract event 0x45ec5e670f1d367b5dc6f15b95818ac76831881de8f4db9df3d397a7ce8b9331.
//
// Solidity: event RewardToWinder(bytes32 indexed id, address indexed winner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) WatchRewardToWinder(opts *bind.WatchOpts, sink chan<- *StoreRewardToWinder, id [][32]byte, winner []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "RewardToWinder", idRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreRewardToWinder)
				if err := _Store.contract.UnpackLog(event, "RewardToWinder", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardToWinder is a log parse operation binding the contract event 0x45ec5e670f1d367b5dc6f15b95818ac76831881de8f4db9df3d397a7ce8b9331.
//
// Solidity: event RewardToWinder(bytes32 indexed id, address indexed winner, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) ParseRewardToWinder(log types.Log) (*StoreRewardToWinder, error) {
	event := new(StoreRewardToWinder)
	if err := _Store.contract.UnpackLog(event, "RewardToWinder", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreTaxIterator is returned from FilterTax and is used to iterate over the raw logs and unpacked data for Tax events raised by the Store contract.
type StoreTaxIterator struct {
	Event *StoreTax // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreTaxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreTax)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreTax)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreTaxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreTaxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreTax represents a Tax event raised by the Store contract.
type StoreTax struct {
	Id        [32]byte
	Payer     common.Address
	Amount    *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTax is a free log retrieval operation binding the contract event 0x6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f511673499.
//
// Solidity: event Tax(bytes32 indexed id, address indexed payer, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) FilterTax(opts *bind.FilterOpts, id [][32]byte, payer []common.Address) (*StoreTaxIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var payerRule []interface{}
	for _, payerItem := range payer {
		payerRule = append(payerRule, payerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "Tax", idRule, payerRule)
	if err != nil {
		return nil, err
	}
	return &StoreTaxIterator{contract: _Store.contract, event: "Tax", logs: logs, sub: sub}, nil
}

// WatchTax is a free log subscription operation binding the contract event 0x6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f511673499.
//
// Solidity: event Tax(bytes32 indexed id, address indexed payer, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) WatchTax(opts *bind.WatchOpts, sink chan<- *StoreTax, id [][32]byte, payer []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var payerRule []interface{}
	for _, payerItem := range payer {
		payerRule = append(payerRule, payerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "Tax", idRule, payerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreTax)
				if err := _Store.contract.UnpackLog(event, "Tax", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTax is a log parse operation binding the contract event 0x6897281b3149fbe149fba21328f8e2b528874f8df2f7734157af46f511673499.
//
// Solidity: event Tax(bytes32 indexed id, address indexed payer, uint256 amount, uint256 timestamp)
func (_Store *StoreFilterer) ParseTax(log types.Log) (*StoreTax, error) {
	event := new(StoreTax)
	if err := _Store.contract.UnpackLog(event, "Tax", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StoreVoteIterator is returned from FilterVote and is used to iterate over the raw logs and unpacked data for Vote events raised by the Store contract.
type StoreVoteIterator struct {
	Event *StoreVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StoreVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StoreVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StoreVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StoreVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StoreVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StoreVote represents a Vote event raised by the Store contract.
type StoreVote struct {
	Id    [32]byte
	Qid   [32]byte
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterVote is a free log retrieval operation binding the contract event 0x3adcc7ed4ad7f15aac0fad8639a7de2a8a492d2d6df1a3c1b21f14f7650387ce.
//
// Solidity: event Vote(bytes32 indexed id, bytes32 indexed qid, address indexed owner)
func (_Store *StoreFilterer) FilterVote(opts *bind.FilterOpts, id [][32]byte, qid [][32]byte, owner []common.Address) (*StoreVoteIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var qidRule []interface{}
	for _, qidItem := range qid {
		qidRule = append(qidRule, qidItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.FilterLogs(opts, "Vote", idRule, qidRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &StoreVoteIterator{contract: _Store.contract, event: "Vote", logs: logs, sub: sub}, nil
}

// WatchVote is a free log subscription operation binding the contract event 0x3adcc7ed4ad7f15aac0fad8639a7de2a8a492d2d6df1a3c1b21f14f7650387ce.
//
// Solidity: event Vote(bytes32 indexed id, bytes32 indexed qid, address indexed owner)
func (_Store *StoreFilterer) WatchVote(opts *bind.WatchOpts, sink chan<- *StoreVote, id [][32]byte, qid [][32]byte, owner []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var qidRule []interface{}
	for _, qidItem := range qid {
		qidRule = append(qidRule, qidItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Store.contract.WatchLogs(opts, "Vote", idRule, qidRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StoreVote)
				if err := _Store.contract.UnpackLog(event, "Vote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVote is a log parse operation binding the contract event 0x3adcc7ed4ad7f15aac0fad8639a7de2a8a492d2d6df1a3c1b21f14f7650387ce.
//
// Solidity: event Vote(bytes32 indexed id, bytes32 indexed qid, address indexed owner)
func (_Store *StoreFilterer) ParseVote(log types.Log) (*StoreVote, error) {
	event := new(StoreVote)
	if err := _Store.contract.UnpackLog(event, "Vote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
