// Code generated by sqlc. DO NOT EDIT.
// source: quiz.sql

package db

import (
	"context"
	"database/sql"
)

const countQuiz = `-- name: CountQuiz :one
SELECT count(*) FROM quiz
`

func (q *Queries) CountQuiz(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countQuiz)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countQuizByStatus = `-- name: CountQuizByStatus :one
SELECT count(*) FROM quiz WHERE status = $1
`

func (q *Queries) CountQuizByStatus(ctx context.Context, status int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countQuizByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quiz (
    "id",
    "type",
    "owner",
    "content",
    "hash_content",
    "answer",
    "hash_answer",
    "reward",
    "duration",
    "duration_voting",
    "timestamp_created",
    "status"
) values (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at
`

type CreateQuizParams struct {
	ID               string         `json:"id"`
	Type             int32          `json:"type"`
	Owner            string         `json:"owner"`
	Content          sql.NullString `json:"content"`
	HashContent      string         `json:"hash_content"`
	Answer           sql.NullString `json:"answer"`
	HashAnswer       sql.NullString `json:"hash_answer"`
	Reward           sql.NullInt64  `json:"reward"`
	Duration         int64          `json:"duration"`
	DurationVoting   sql.NullInt64  `json:"duration_voting"`
	TimestampCreated int64          `json:"timestamp_created"`
	Status           int32          `json:"status"`
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, createQuiz,
		arg.ID,
		arg.Type,
		arg.Owner,
		arg.Content,
		arg.HashContent,
		arg.Answer,
		arg.HashAnswer,
		arg.Reward,
		arg.Duration,
		arg.DurationVoting,
		arg.TimestampCreated,
		arg.Status,
	)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Owner,
		&i.Content,
		&i.HashContent,
		&i.Answer,
		&i.HashAnswer,
		&i.Reward,
		&i.Winner,
		&i.PredictionWinner,
		&i.Duration,
		&i.DurationVoting,
		&i.TimestampCreated,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
DELETE FROM quiz WHERE ID = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteQuiz, id)
	return err
}

const findQuizById = `-- name: FindQuizById :one
SELECT id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at FROM quiz WHERE id = $1 LIMIT 1
`

func (q *Queries) FindQuizById(ctx context.Context, id string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, findQuizById, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Owner,
		&i.Content,
		&i.HashContent,
		&i.Answer,
		&i.HashAnswer,
		&i.Reward,
		&i.Winner,
		&i.PredictionWinner,
		&i.Duration,
		&i.DurationVoting,
		&i.TimestampCreated,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const findQuizByStatus = `-- name: FindQuizByStatus :many
SELECT id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at FROM quiz WHERE status = $1 ORDER BY created_at DESC LIMIT $3 OFFSET $2
`

type FindQuizByStatusParams struct {
	Status int32 `json:"status"`
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindQuizByStatus(ctx context.Context, arg FindQuizByStatusParams) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, findQuizByStatus, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Owner,
			&i.Content,
			&i.HashContent,
			&i.Answer,
			&i.HashAnswer,
			&i.Reward,
			&i.Winner,
			&i.PredictionWinner,
			&i.Duration,
			&i.DurationVoting,
			&i.TimestampCreated,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findQuizzes = `-- name: FindQuizzes :many
SELECT id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at FROM quiz ORDER BY created_at DESC LIMIT $2 OFFSET $1
`

type FindQuizzesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) FindQuizzes(ctx context.Context, arg FindQuizzesParams) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, findQuizzes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Owner,
			&i.Content,
			&i.HashContent,
			&i.Answer,
			&i.HashAnswer,
			&i.Reward,
			&i.Winner,
			&i.PredictionWinner,
			&i.Duration,
			&i.DurationVoting,
			&i.TimestampCreated,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const finishQuiz = `-- name: FinishQuiz :one
UPDATE quiz SET status = 0 WHERE id = $1 AND status = 1 RETURNING id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at
`

func (q *Queries) FinishQuiz(ctx context.Context, id string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, finishQuiz, id)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Owner,
		&i.Content,
		&i.HashContent,
		&i.Answer,
		&i.HashAnswer,
		&i.Reward,
		&i.Winner,
		&i.PredictionWinner,
		&i.Duration,
		&i.DurationVoting,
		&i.TimestampCreated,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateQuizAnswer = `-- name: UpdateQuizAnswer :one
UPDATE quiz SET answer = $2 where id = $1 RETURNING id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at
`

type UpdateQuizAnswerParams struct {
	ID     string         `json:"id"`
	Answer sql.NullString `json:"answer"`
}

func (q *Queries) UpdateQuizAnswer(ctx context.Context, arg UpdateQuizAnswerParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, updateQuizAnswer, arg.ID, arg.Answer)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Owner,
		&i.Content,
		&i.HashContent,
		&i.Answer,
		&i.HashAnswer,
		&i.Reward,
		&i.Winner,
		&i.PredictionWinner,
		&i.Duration,
		&i.DurationVoting,
		&i.TimestampCreated,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateQuizContent = `-- name: UpdateQuizContent :one
UPDATE quiz SET content = $2 WHERE id = $1 RETURNING id, type, owner, content, hash_content, answer, hash_answer, reward, winner, prediction_winner, duration, duration_voting, timestamp_created, status, created_at
`

type UpdateQuizContentParams struct {
	ID      string         `json:"id"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdateQuizContent(ctx context.Context, arg UpdateQuizContentParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, updateQuizContent, arg.ID, arg.Content)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Owner,
		&i.Content,
		&i.HashContent,
		&i.Answer,
		&i.HashAnswer,
		&i.Reward,
		&i.Winner,
		&i.PredictionWinner,
		&i.Duration,
		&i.DurationVoting,
		&i.TimestampCreated,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateResultQuiz = `-- name: UpdateResultQuiz :exec
UPDATE quiz SET status = $2, winner = $3, prediction_winner = $4 where id = $1
`

type UpdateResultQuizParams struct {
	ID               string         `json:"id"`
	Status           int32          `json:"status"`
	Winner           sql.NullString `json:"winner"`
	PredictionWinner sql.NullString `json:"prediction_winner"`
}

func (q *Queries) UpdateResultQuiz(ctx context.Context, arg UpdateResultQuizParams) error {
	_, err := q.db.ExecContext(ctx, updateResultQuiz,
		arg.ID,
		arg.Status,
		arg.Winner,
		arg.PredictionWinner,
	)
	return err
}
